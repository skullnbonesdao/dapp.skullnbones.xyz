import{u as n}from"./SquadsStore.b69a8a32.js";import{P as o,de as i,dd as h,cn as a,df as p,da as m}from"./index.fa0f5368.js";import"./pda.eced23c2.js";import"./cusper.636a8d31.js";import{v as f}from"./token.e5eea146.js";function S(){return n().useSquads?new o(n().vaultPDA):i().publicKey.value??new o("")}const T=async(s,r="Unlabeled transaction")=>{const{sendTransaction:c}=i(),e=h.create({group:!1,timeout:0,spinner:!0,message:r,caption:"...",position:"bottom-right"});try{e({caption:"Waiting for user to sign..."});let t="";if(!n().useSquads)t=await c(s,a().connection);else{const u=await a().connection.getRecentBlockhash(),g=new p({payerKey:new o(n().vaultPDA),recentBlockhash:u.blockhash,instructions:s.instructions});await n().loadMultisigInfo();const d=f({multisigPda:new o(n().multisigPDA),transactionIndex:n().getNewTransactionIndex,creator:i().publicKey.value,vaultIndex:0,ephemeralSigners:0,transactionMessage:g,memo:r});t=await c(new m().add(d),a().connection)}e({caption:`Waiting for confirmation: ${t}`});const l=await a().connection.getLatestBlockhash();return await a().connection.confirmTransaction({blockhash:l.blockhash,lastValidBlockHeight:l.lastValidBlockHeight,signature:t}),e({color:"positive",timeout:5e3,icon:"done",spinner:!1,caption:`Confirmed: ${t}`}),0}catch(t){e({progress:!0,spinner:!1,icon:"error",color:"negative",timeout:5e3,caption:`Error handling transaction: ${t.toString()}`})}};export{S as g,T as h};
