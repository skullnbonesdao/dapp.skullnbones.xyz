import{a as z,Q as fe}from"./QTabs.0d18b9d5.js";import{Q as _e}from"./QPage.31c2f50c.js";import{a as _,Q as q}from"./QInput.fa31dd95.js";import{Q as ve}from"./QSpace.9c38678f.js";import{P as l,cn as y,dg as L,d0 as S,cM as he,cP as pe,cN as v,dd as Ae,d9 as K,au as R,b1 as m,ai as b,bx as k,as as o,al as e,V as a,ck as w,ak as p,bz as se,a6 as N,b7 as X,a1 as h,aj as H,cq as oe,J as I,aX as Z,ed as be,ee as Q,df as D,di as O,ef as xe,eg as ae,bs as ke,cl as Se}from"./index.c6ca1f90.js";import{j as ie,k as ne}from"./rtl.a88e20be.js";import{Q as Pe}from"./QList.772213fa.js";import{Q as F}from"./QCard.9bc6fa26.js";import{g as U,M as Te}from"./pda.386d6c74.js";import"./assert.6afcd24c.js";import{v as Le}from"./vaultTransactionCreate.deafa28a.js";import{d as g}from"./index.4b06a491.js";import{h as Ee}from"./handle_confirmation.d4335d84.js";import{t as Me}from"./token.2f5b83f8.js";import{a as De}from"./Amount.8e7986c0.js";import{g as $}from"./extensionType.a0244ac2.js";import{Q as ye}from"./QImg.bbaa1a69.js";import{Q as P}from"./QSeparator.adbe345b.js";import{Q as $e}from"./QSelect.41903ec2.js";import{c as re}from"./associatedTokenAccount.36bd3d0b.js";import"./cusper.a8a21f48.js";import"./sha256.0e9c60a1.js";import"./defineProperty.034d6b40.js";import"./errors.4b945f55.js";const V=new l("ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx"),ce=new l("poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk"),Ke=new l("ATLkZsBofSKG845dNFpNoUyMciGpeH29BCbMqYFUoxzU"),x=new l("ATLocKpzDbTokxgvnLew3d7drZkEzLzDpzwgrgWKDbmc");class Ie{multisigPDA;vaultPDA;registeredStakeAtlas;stakingAccountAtlas;async init(s){this.multisigPDA=s,this._setVaultPDA(),await this._setRegisteredStakeAtlas(),await this._setStakingAccountAtlas()}_setVaultPDA(){const[s]=U({multisigPda:new l(this.multisigPDA),index:0});this.vaultPDA=s}async _setRegisteredStakeAtlas(){const[s]=await g.getRegisteredStake(x,Ke,V,ce);this.registeredStakeAtlas=s}async _setStakingAccountAtlas(){const[s]=await g.getStakingAccount(x,this.vaultPDA,this.registeredStakeAtlas);this.stakingAccountAtlas=s}async buildCreateStatingAccount(){return await g.createStakingAccountInstruction({connection:y().connection,user:this.vaultPDA,registeredStake:this.registeredStakeAtlas,programId:x})}async buildStakeTokens(s){const[u]=l.findProgramAddressSync([this.vaultPDA.toBuffer(),L.toBuffer(),V.toBuffer()],Me.ASSOCIATED_PROGRAM_ID);return await g.stakeTokensInstruction({connection:y().connection,user:this.vaultPDA,stakeMint:V,tokenSource:u,stakingAccount:this.stakingAccountAtlas,stakeQuantity:new S(parseFloat(s.toString())*Math.pow(10,J)),registeredStake:this.registeredStakeAtlas,programId:x})}async buildHarvestRewards(){return await g.harvestRewardsInstruction({connection:y().connection,user:this.vaultPDA,rewardMint:ce,registeredStake:this.registeredStakeAtlas,stakingAccount:this.stakingAccountAtlas,programId:x})}async buildWithdrawTokens(){return await g.withdrawTokensInstruction({connection:y().connection,user:this.vaultPDA,authority:this.vaultPDA,stakeMint:V,registeredStake:this.registeredStakeAtlas,stakingAccount:this.stakingAccountAtlas,programId:x})}async buildUnstakeTokens(){return await g.unstakeTokensInstruction({connection:y().connection,user:this.vaultPDA,registeredStake:this.registeredStakeAtlas,stakingAccount:this.stakingAccountAtlas,programId:x})}async buildCancelUnstake(){return await g.cancelUnstakeInstruction({connection:y().connection,user:this.vaultPDA,registeredStake:this.registeredStakeAtlas,programId:x})}}const E="[ATLAS-LOCKER] ",J=8,C=new l("ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx"),f=new l("poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk"),B=new l("ATLocKpzDbTokxgvnLew3d7drZkEzLzDpzwgrgWKDbmc"),le=new l("ATLkZsBofSKG845dNFpNoUyMciGpeH29BCbMqYFUoxzU"),t=he("globalStarAtlasLockerStore",{state:()=>({multisigPDA:pe("multisigPDA",""),vaultPDA:{},multisigInfo:{},registeredStakeAtlas:{},registeredStakePolis:{},stakingAccountAtlas:{},stakingAccountAtlasInfo:{},atlas_balance_wallet:"0",polis_balance_wallet:"0",atlas_balance_squads:"0",polis_balance_squads:"0",atlas_balance_locker:"0",polis_balance_locker:"0",SAFactory_LockerAtlas:new Ie}),getters:{getMultisigPDA(d){return new l(d.multisigPDA)},getVaultPDA(){try{const[d]=U({multisigPda:new l(this.multisigPDA),index:0});return d}catch{return""}},getNewTransactionIndex(d){const s=Number(d.multisigInfo.transactionIndex);return BigInt(s+1)}},actions:{async setAccounts(){t().atlas_balance_wallet="0",t().polis_balance_wallet="0",t().atlas_balance_squads="0",t().polis_balance_squads="0",t().atlas_balance_locker="0",t().polis_balance_locker="0",t().stakingAccountAtlasInfo=void 0;const[d]=U({multisigPda:new l(this.multisigPDA),index:0});this.vaultPDA=d,this.multisigInfo=await Te.fromAccountAddress(y().connection,new l(this.multisigPDA));const[s]=await g.getRegisteredStake(B,le,C,f);this.registeredStakeAtlas=s;const[u]=await g.getRegisteredStake(B,le,C,f);this.registeredStakePolis=u;try{const[i]=await g.getStakingAccount(B,this.vaultPDA,this.registeredStakeAtlas);this.stakingAccountAtlas=i}catch{}try{this.stakingAccountAtlasInfo=await g.getStakingAccountInfo(y().connection,this.stakingAccountAtlas,B)}catch{}await Ce()},async build_CreateStatingAccount(){await this.SAFactory_LockerAtlas.init(this.multisigPDA),await M(E+"CreateStatingAccount: "+De,[(await this.SAFactory_LockerAtlas.buildCreateStatingAccount()).instructions[0]])},async build_StakeTokens(d){await this.SAFactory_LockerAtlas.init(this.multisigPDA),await M(E+"StakeTokens: "+d,[(await this.SAFactory_LockerAtlas.buildStakeTokens(d)).instructions[0]])},async build_harvestRewards(){await this.SAFactory_LockerAtlas.init(this.multisigPDA),await M(E+"HarvestRewards",[(await this.SAFactory_LockerAtlas.buildHarvestRewards()).instructions[0]])},async build_withdrawTokens(){await this.SAFactory_LockerAtlas.init(this.multisigPDA),await M(E+"WithdrawTokens",[(await this.SAFactory_LockerAtlas.buildWithdrawTokens()).instructions[0]])},async build_unstakeTokens(){await this.SAFactory_LockerAtlas.init(this.multisigPDA),await M(E+"UnstakeTokens",[(await this.SAFactory_LockerAtlas.buildUnstakeTokens()).instructions[0]])},async build_cancelUnstake(){await this.SAFactory_LockerAtlas.init(this.multisigPDA),await M(E+"CancelUnstake",[(await this.SAFactory_LockerAtlas.buildCancelUnstake()).instructions[0]])}}});async function M(d,s){const{sendTransaction:u,publicKey:i}=v(),r=new Ae({payerKey:t().vaultPDA,recentBlockhash:(await y().connection.getLatestBlockhash()).blockhash,instructions:s}),n=Le({multisigPda:new l(t().multisigPDA),transactionIndex:t().getNewTransactionIndex,creator:i.value,vaultIndex:0,ephemeralSigners:0,transactionMessage:r,memo:d});console.log("build: "+d);const c=await u(new K().add(n),y().connection);await Ee(c)}async function Ce(){const{publicKey:d}=v();if(!d.value)return;const s=await $(C,d.value),u=await $(f,d.value),i=await $(C,t().vaultPDA,!0),r=await $(f,t().vaultPDA,!0),n=await $(C,t().stakingAccountAtlas,!0);try{t().atlas_balance_wallet=(await y().connection.getTokenAccountBalance(s)).value.uiAmountString??"0"}catch{t().atlas_balance_wallet="-"}try{t().polis_balance_wallet=(await y().connection.getTokenAccountBalance(u)).value.uiAmountString??"0"}catch{t().polis_balance_wallet="-"}try{t().atlas_balance_squads=(await y().connection.getTokenAccountBalance(i)).value.uiAmountString??"0"}catch{t().atlas_balance_squads="-"}try{t().polis_balance_squads=(await y().connection.getTokenAccountBalance(r)).value.uiAmountString??"0"}catch{t().polis_balance_squads="-"}try{t().atlas_balance_locker=(await y().connection.getTokenAccountBalance(n)).value.uiAmountString??""}catch{t().atlas_balance_locker="-"}}const qe=e("div",{class:"text-h6 text-weight-thin"}," This Tool is build for easy interaction between StarAtlasLockers using a Squads.so multi signature account! ",-1),Re=e("div",{class:"text-subtitle1"}," Please enter the required information so send instructions to your Squads Account ",-1),Oe=e("div",{class:"text-subtitle2 text-weight-thin text-orange-5"}," You will still need to approve the transaction in you squads account! ",-1),Ve={class:"row q-gutter-x-sm items-center"},Be={class:"col"},We=e("div",{class:"col text-weight-light"}," Squads.so -> Settings -> Multisig Account ",-1),He={class:"row q-gutter-x-sm items-center"},Ne={class:"col"},Ue=e("div",{class:"col text-weight-light"},"Your Squads Account",-1),Fe={class:"row items-center"},ze=e("div",{class:"text-subtitle1"},"Squads Multisig Info",-1),Qe={key:0},Ge=e("div",{class:"text-subtitle2"},"Members",-1),je=e("div",{class:"row"},[e("div",{class:"col"},"Member Address"),e("div",null,"Permission")],-1),Ye={class:"row"},Xe={class:"col"},Ze=R({__name:"SetupLockerView",setup(d){return(s,u)=>(m(),b(F,{flat:""},{default:k(()=>[o(_,null,{default:k(()=>[qe]),_:1}),o(_,null,{default:k(()=>[Re,Oe]),_:1}),o(_,{class:"q-gutter-y-sm"},{default:k(()=>[e("div",Ve,[e("div",Be,[o(q,{dense:"",standout:"",modelValue:a(t)().multisigPDA,"onUpdate:modelValue":u[0]||(u[0]=i=>a(t)().multisigPDA=i),label:"MultisigPDA"},null,8,["modelValue"])]),We]),e("div",He,[e("div",Ne,[o(q,{disable:"",dense:"",standout:"",modelValue:a(t)().getVaultPDA,"onUpdate:modelValue":u[1]||(u[1]=i=>a(t)().getVaultPDA=i),label:"VaultPDA"},null,8,["modelValue"])]),Ue])]),_:1}),o(_,null,{default:k(()=>{var i,r;return[e("div",Fe,[ze,o(ve),o(w,{square:"",color:"primary",label:"Update Squads info",onClick:u[2]||(u[2]=n=>a(t)().setAccounts())})]),(r=(i=a(t)().multisigInfo)==null?void 0:i.members)!=null&&r.length?(m(),p("div",Qe,[Ge,o(Pe,{dense:"",bordered:"",padding:"",class:"rounded-borders"},{default:k(()=>[se((m(),b(ie,null,{default:k(()=>[o(ne,null,{default:k(()=>[je]),_:1})]),_:1})),[[oe]]),(m(!0),p(N,null,X(a(t)().multisigInfo.members,n=>se((m(),b(ie,{clickable:"",key:n.key},{default:k(()=>[o(ne,null,{default:k(()=>[e("div",Ye,[e("div",Xe,h(n.key),1),e("div",null,h(n.permissions.mask),1)])]),_:2},1024)]),_:2},1024)),[[oe]])),128))]),_:1})])):H("",!0)]}),_:1})]),_:1}))}}),Je={class:"row"},et={class:"col-1"},tt={class:"col"},st={class:"row q-pr-md items-center"},ot=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Squads Vault Account")],-1),at={class:"col text-right text-subtitle1"},it={class:"row q-pr-md items-center"},nt=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Squads Registered Stake")],-1),rt={class:"col text-right text-subtitle1"},ct={class:"row q-pr-md items-center"},lt=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Squads Staking Account")],-1),dt={class:"col text-right text-subtitle1"},ut=e("div",{class:"row items-center q-mx-md"},[e("div",{class:"col"},[e("div",{class:"text-h4"},"Instruction")]),e("div",{class:"col-4"},[e("div",{class:"text-h4 text-center"},"Action")])],-1),mt={class:"row items-center q-mx-md"},ht=e("div",{class:"col"},[e("div",{class:"text-h6"},"Create Staking Account"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will create a new locker instance for you ")],-1),pt={class:"col-4"},kt={class:"row items-center q-mx-md"},yt=e("div",{class:"col"},[e("div",{class:"text-h6"},"Stake Tokens"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will stake additional tokens ")],-1),wt={class:"col-4"},gt={class:"row q-gutter-x-xs"},ft={class:"row items-center q-mx-md"},_t=e("div",{class:"col"},[e("div",{class:"col text-h6"},"Harvest"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will claim your rewards ")],-1),vt={class:"col-4"},At={class:"row items-center q-mx-md"},bt=e("div",{class:"col"},[e("div",{class:"text-h6"},"Unstake Tokens"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will initiate unstake of all tokens ")],-1),xt={class:"col-4"},St={class:"row items-center q-mx-md"},Pt=e("div",{class:"col"},[e("div",{class:"text-h6"},"Cancel Unstake"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will cancel unstake of all tokens ")],-1),Tt={class:"col-4"},Lt={class:"row items-center q-mx-md"},Et=e("div",{class:"col"},[e("div",{class:"text-h6"},"Withdraw Tokens"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will withdraw of all tokens after unstake ")],-1),Mt={class:"col-4"},Dt={class:"row items-center"},$t=e("div",{class:"col-1 text-h5"},"Locker Info",-1),Kt={key:0,class:"col"},It={class:"col text-right text-subtitle2 text-weight-light"},Ct={class:"col text-right text-subtitle1"},qt={key:0},Rt={key:1},Ot={key:0},Vt={key:1},Bt={key:2},Wt={key:1,class:"text-subtitle2 text-center"},Ht=R({__name:"AtlasLockerView",setup(d){const s=I(0);return Z(async()=>{await t().setAccounts()}),(u,i)=>(m(),b(F,{flat:""},{default:k(()=>[o(_,null,{default:k(()=>[e("div",Je,[e("div",et,[o(ye,{src:"/currencies/ATLAS.webp"})]),o(P,{class:"q-mx-sm",vertical:""}),e("div",tt,[e("div",st,[ot,e("div",at,[e("div",null,h(a(t)().vaultPDA),1)])]),e("div",it,[nt,e("div",rt,[e("div",null,h(a(t)().registeredStakeAtlas),1)])]),e("div",ct,[lt,e("div",dt,[e("div",null,h(a(t)().stakingAccountAtlas),1)])])])])]),_:1}),o(_,null,{default:k(()=>[ut,o(P,{class:"q-my-sm"}),e("div",mt,[ht,e("div",pt,[o(w,{class:"full-width",square:"",label:"Sign",color:"primary",onClick:i[0]||(i[0]=r=>a(t)().build_CreateStatingAccount())})])]),e("div",kt,[yt,e("div",wt,[e("div",gt,[o(q,{dense:"",square:"",class:"col",standout:"",type:"number",modelValue:s.value,"onUpdate:modelValue":i[1]||(i[1]=r=>s.value=r),label:"Amount to stake"},null,8,["modelValue"]),o(w,{square:"",class:"col-3",label:"Sign",color:"primary",onClick:i[2]||(i[2]=r=>a(t)().build_StakeTokens(s.value))})])])]),e("div",ft,[_t,e("div",vt,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:i[3]||(i[3]=r=>a(t)().build_harvestRewards())})])]),e("div",At,[bt,e("div",xt,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:i[4]||(i[4]=r=>a(t)().build_unstakeTokens())})])]),e("div",St,[Pt,e("div",Tt,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:i[5]||(i[5]=r=>a(t)().build_cancelUnstake())})])]),e("div",Lt,[Et,e("div",Mt,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:i[6]||(i[6]=r=>a(t)().build_withdrawTokens())})])])]),_:1}),o(_,null,{default:k(()=>[o(P,{class:"q-my-sm"}),e("div",Dt,[$t,o(P,{class:"q-mx-sm",vertical:""}),a(t)().stakingAccountAtlasInfo?(m(),p("div",Kt,[(m(!0),p(N,null,X(Object.keys(a(t)().stakingAccountAtlasInfo),(r,n)=>(m(),p("div",{class:"row q-pr-md items-center",key:n},[e("div",It,[e("div",null,h(r),1)]),e("div",Ct,[["totalStake","activeStake","paidRewards","pendingRewards"].includes(r)?(m(),p("div",qt,h(parseInt(a(t)().stakingAccountAtlasInfo[r])*Math.pow(10,-a(J))),1)):["stakedAtTs","lastPendingRewardCalcTs","lastHarvestTs","unstakedTs"].includes(r)?(m(),p("div",Rt,[parseInt(a(t)().stakingAccountAtlasInfo[r])==0?(m(),p("div",Ot," - ")):(m(),p("div",Vt,h(new Date(parseInt(a(t)().stakingAccountAtlasInfo[r])*1e3).toLocaleString()),1))])):(m(),p("div",Bt,h(a(t)().stakingAccountAtlasInfo[r]),1))])]))),128))])):(m(),p("div",Wt,"No Locker found!"))])]),_:1})]),_:1}))}}),Nt="0.5.6",Ut="proxy_rewarder",Ft=[{name:"registerLocker",docs:["Registers a Locker from the locked_voter program"],accounts:[{name:"admin",isMut:!0,isSigner:!0,docs:["Admin key"]},{name:"locker",isMut:!1,isSigner:!1,docs:["[locked_voter::Locker]."]},{name:"registeredLocker",isMut:!0,isSigner:!1,docs:["New RegisteredLocker account"],pda:{seeds:[{kind:"const",type:"string",value:"RegisteredLocker"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"}]}},{name:"tokenMint",isMut:!1,isSigner:!1,docs:["The token mint that matches the Locker token mint (ie POLIS)"]},{name:"treasuryTokenAccount",isMut:!0,isSigner:!1,docs:["The treasury token account holding all tokens to reward users"],pda:{seeds:[{kind:"const",type:"string",value:"TreasuryTokenAccount"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"}]}},{name:"treasuryAuthority",isMut:!0,isSigner:!1,docs:["The treasury authority PDA     /// CHECK: pda token account authority"],pda:{seeds:[{kind:"const",type:"string",value:"TreasuryAuthority"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"}]}},{name:"tokenProgram",isMut:!1,isSigner:!1},{name:"systemProgram",isMut:!1,isSigner:!1},{name:"rent",isMut:!1,isSigner:!1}],args:[]},{name:"updateRegisteredLocker",docs:["Updates `rewards` arrays in registered_locker [proxy_rewarder::registered_locker]."],accounts:[{name:"admin",isMut:!1,isSigner:!0,docs:["Admin key"]},{name:"locker",isMut:!1,isSigner:!1,docs:["The [locked_voter::locker] being exited from."]},{name:"registeredLocker",isMut:!0,isSigner:!1,docs:["RegisteredLocker account"],pda:{seeds:[{kind:"const",type:"string",value:"RegisteredLocker"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"}]}}],args:[{name:"era",type:"u16"},{name:"index",type:"u16"},{name:"periodRewardAmount",type:"u64"}]},{name:"newProxyEscrow",accounts:[{name:"escrowOwner",isMut:!0,isSigner:!0,docs:["[Owner]."]},{name:"proxyEscrow",isMut:!0,isSigner:!1,docs:["[Escrow]."],pda:{seeds:[{kind:"const",type:"string",value:"ProxyEscrow"},{kind:"account",type:"publicKey",path:"escrow_owner"}]}},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer of the initialization."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"bump",type:"u8"}]},{name:"newProxy",docs:["Creates a new [Proxy] for an account.","","A Reward Escrow, or [Escrow] for short, is an agreement between a users=>proxy (known as the `authority`) and the Reward Program to","reward POLIS over specific periods of time. (curve)","proportional to the amount of stakers."],accounts:[{name:"proxyEscrow",isMut:!0,isSigner:!1,docs:["[ProxyEscrow]."]},{name:"proxy",isMut:!0,isSigner:!1,docs:["[Proxy]."],pda:{seeds:[{kind:"const",type:"string",value:"Proxy"},{kind:"account",type:"publicKey",account:"ProxyEscrow",path:"proxy_escrow"},{kind:"account",type:"publicKey",path:"proxy_owner"}]}},{name:"tokenMint",isMut:!1,isSigner:!1,docs:["Mint of the token that can be used to join the [LockedVoter::Locker]."]},{name:"proxyOwner",isMut:!0,isSigner:!0,docs:["Authority of the [Proxy] to be created."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"bump",type:"u8"}]},{name:"proxyLock",docs:["Locks `amount` of POLIS into the [LockedVoter::Escrow]."],accounts:[{name:"locker",isMut:!0,isSigner:!1,docs:["[locked_voter::Locker]."]},{name:"escrow",isMut:!0,isSigner:!1},{name:"userTokenAccount",isMut:!0,isSigner:!1,docs:["The source of deposited tokens."]},{name:"proxyTokenAccount",isMut:!0,isSigner:!1,docs:["Token account used to transfer governance tokens into [locked_voter::lock] escrow"]},{name:"escrowTokenAccount",isMut:!0,isSigner:!1,docs:["Token account held by the [locked_voter::Escrow]."]},{name:"proxy",isMut:!0,isSigner:!1,docs:["Authority of the [locked_voter::escrow]."],pda:{seeds:[{kind:"const",type:"string",value:"Proxy"},{kind:"account",type:"publicKey",account:"Proxy",path:"proxy.escrow"},{kind:"account",type:"publicKey",path:"payer"}]}},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer of the initialization."]},{name:"lockedVoterProgram",isMut:!1,isSigner:!1,docs:["The [LockedVoter] program."]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Token program."]},{name:"instructionsSysvar",isMut:!1,isSigner:!1},{name:"whitelistEntry",isMut:!1,isSigner:!1,docs:["Whitelist entry."]},{name:"registeredLocker",isMut:!1,isSigner:!1}],args:[{name:"amount",type:"u64"},{name:"duration",type:"i64"}]},{name:"proxyExit",docs:["Exits the POLIS DAO; i.e., withdraws all staked tokens in an [Escrow] if the [Escrow] is unlocked."],accounts:[{name:"locker",isMut:!0,isSigner:!1,docs:["The [locked_voter::locker] being exited from."]},{name:"escrow",isMut:!0,isSigner:!1,docs:["The [locked_voter::Escrow] that is being closed."]},{name:"proxy",isMut:!0,isSigner:!1,docs:["Authority of the [locked_voter::Escrow]."],pda:{seeds:[{kind:"const",type:"string",value:"Proxy"},{kind:"account",type:"publicKey",account:"Proxy",path:"proxy.escrow"},{kind:"account",type:"publicKey",path:"payer"}]}},{name:"escrowTokenAccount",isMut:!0,isSigner:!1,docs:["Tokens locked up in the [locked_voter::Escrow]."]},{name:"proxyTokenAccount",isMut:!0,isSigner:!1,docs:["Destination for the tokens to unlock."]},{name:"userTokenAccount",isMut:!0,isSigner:!1,docs:["Final destination for the tokens to unlock."]},{name:"payer",isMut:!0,isSigner:!0,docs:["The payer to receive the rent refund."]},{name:"lockedVoterProgram",isMut:!1,isSigner:!1,docs:["The [LockedVoter] program."]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Token program."]},{name:"registeredLocker",isMut:!1,isSigner:!1}],args:[]},{name:"claimRewards",docs:["Proxy Activates a proposal.","Proxy Casts a vote.","Claims POLIS Rewards; i.e., withdraws reward tokens from a treasury if the [snapshots::escrow_history] is confirmed."],accounts:[{name:"escrow",isMut:!1,isSigner:!1,docs:["The [locked_voter::Escrow] being validated from."]},{name:"locker",isMut:!1,isSigner:!1,docs:["The [locked_voter::locker] being exited from."]},{name:"proxy",isMut:!1,isSigner:!1,docs:["Authority of the [locked_voter::Escrow]."]},{name:"proxyEscrow",isMut:!0,isSigner:!1,docs:["[proxy_rewarder::proxy_escrow]."]},{name:"escrowHistory",isMut:!1,isSigner:!1,docs:["The [snapshots::escrow_history] to read and validate."]},{name:"lockerHistory",isMut:!1,isSigner:!1,docs:["The [snapshots::locker_history] to read and validate."]},{name:"treasuryTokenAccount",isMut:!0,isSigner:!1,docs:["Treasury tokens in the [proxy_rewarder::treasury_token_account]. The treasury token account holding all tokens to reward users"],pda:{seeds:[{kind:"const",type:"string",value:"TreasuryTokenAccount"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"}]}},{name:"registeredLocker",isMut:!1,isSigner:!1,docs:["RegisteredLocker account"]},{name:"treasuryAuthority",isMut:!1,isSigner:!1,docs:["The treasury authority PDA"],pda:{seeds:[{kind:"const",type:"string",value:"TreasuryAuthority"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"}]}},{name:"userTokenAccount",isMut:!0,isSigner:!1,docs:["Final destination for the tokens to unlock."]},{name:"escrowOwner",isMut:!1,isSigner:!0,docs:["[Owner]"]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Token program."]}],args:[]}],zt=[{name:"Proxy",type:{kind:"struct",fields:[{name:"escrow",docs:["The [Escrow] that this [Proxy] is part of."],type:"publicKey"},{name:"owner",docs:["The key of the account that is authorized to cpi via this [Proxy]."],type:"publicKey"},{name:"tokenMint",docs:["Mint of the token that must be locked in the [LockedVoter::Locker]."],type:"publicKey"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"proxyTokenAccount",docs:["The token account holding the proxy tokens."],type:"publicKey"}]}},{name:"ProxyEscrow",docs:["records rewards state on a user."],type:{kind:"struct",fields:[{name:"escrowOwner",docs:["The key of the account that is authorized to withdraw from the [Treasury]."],type:"publicKey"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"amount",docs:["Amount of tokens staked."],type:"u64"},{name:"escrowStartedAt",docs:["When the [proxy_escrow::escrow_owner] started their escrow."],type:"i64"},{name:"escrowEndsAt",docs:["When the escrow unlocks; i.e. the [proxy_escrow::escrow_owner] is scheduled to be allowed to withdraw their governance tokens."],type:"i64"},{name:"rewardsLastClaimedAt",docs:["When the [proxy_escrow::escrow_owner] last claimed rewards from [Treasury]."],type:"i64"},{name:"amountClaimed",docs:["Amount of tokens claimed."],type:"u64"}]}},{name:"RegisteredLocker",docs:["Registered locker - needs to be created to earn rewards",'PDA unique to ["RegisteredLocker", locker.key]',"reprc- pack"],type:{kind:"struct",fields:[{name:"admin",docs:["The key of the admin account that is managing the registered locker"],type:"publicKey"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"tokenMint",docs:["The token mint aligned with the locker and for rewards paid to users"],type:"publicKey"},{name:"locker",docs:["The locker account on the locked_voter program being registered"],type:"publicKey"},{name:"padding",docs:["Padding for aligning the struct to an 8-byte boundary."],type:{array:["u8",7]}},{name:"rewardAmountPaidPerPeriodEra0",docs:["All tracked historical reward rate totals per period per era allocated to users."],type:{array:["u64",256]}},{name:"rewardAmountPaidPerPeriodEra1",type:{array:["u64",256]}},{name:"rewardAmountPaidPerPeriodEra2",type:{array:["u64",256]}}]}},{name:"TreasuryAuthority",docs:["Treasury Authority - PDA who has authority to withdraw rewards from the treasury."],type:{kind:"struct",fields:[{name:"locker",docs:["The locker account on the locked_voter program being registered"],type:"publicKey"},{name:"bump",docs:["Bump seed."],type:"u8"}]}}],Qt=[{name:"ClaimRewardsEvent",fields:[{name:"escrowOwner",type:"publicKey",index:!1},{name:"locker",type:"publicKey",index:!1},{name:"tokenMint",type:"publicKey",index:!1},{name:"amountClaimed",type:"u64",index:!1},{name:"prevRewardsLastClaimedAt",type:"i64",index:!1},{name:"rewardsLastClaimedAt",type:"i64",index:!1}]},{name:"NewProxyEscrowEvent",fields:[{name:"proxyEscrow",type:"publicKey",index:!1},{name:"owner",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1}]},{name:"NewProxyEvent",fields:[{name:"proxy",type:"publicKey",index:!1},{name:"proxyOwner",type:"publicKey",index:!1},{name:"proxyEscrow",type:"publicKey",index:!1},{name:"tokenMint",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1}]},{name:"ProxyExitEscrowEvent",fields:[{name:"escrowOwner",type:"publicKey",index:!1},{name:"locker",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1},{name:"lockerSupply",type:"u64",index:!1},{name:"releasedAmount",type:"u64",index:!1}]},{name:"ProxyLockEvent",fields:[{name:"locker",type:"publicKey",index:!1},{name:"escrowOwner",type:"publicKey",index:!1},{name:"tokenMint",type:"publicKey",index:!1},{name:"amount",type:"u64",index:!1},{name:"lockerSupply",type:"u64",index:!1},{name:"duration",type:"i64",index:!1},{name:"prevEscrowEndsAt",type:"i64",index:!1},{name:"nextEscrowEndsAt",type:"i64",index:!1},{name:"nextEscrowStartedAt",type:"i64",index:!1}]}],Gt=[{code:6e3,name:"ProgramNotWhitelisted",msg:"CPI caller not whitelisted to invoke lock instruction."},{code:6001,name:"LockupDurationTooShort",msg:"Lockup duration must at least be the min stake duration."},{code:6002,name:"LockupDurationTooLong",msg:"Lockup duration must at most be the max stake duration."},{code:6003,name:"RefreshCannotShorten",msg:"A voting escrow refresh cannot shorten the escrow time remaining."},{code:6004,name:"EscrowNotEnded",msg:"Escrow has not ended."},{code:6005,name:"MustProvideWhitelist",msg:"Program whitelist enabled; please provide whitelist entry and instructions sysvar"},{code:6006,name:"EscrowOwnerNotWhitelisted",msg:"CPI caller not whitelisted for escrow owner to invoke lock instruction."},{code:6007,name:"InvalidMint",msg:"Invalid SPL Token mint"},{code:6008,name:"InvalidTokenAccount",msg:"Invalid SPL Token account"},{code:6009,name:"NumericalOverflowError",msg:"Numerical overflow error"},{code:6010,name:"UninitializedTokenAccount",msg:"Uninitialized Token Account"},{code:6011,name:"EraMismatch",msg:"Era mismatch."},{code:6012,name:"WrongPDA",msg:"Wrong PDA proxy exit."},{code:6013,name:"YouHaveNoPendingRewards",msg:"You have no claimable rewards."},{code:6014,name:"MustCallProxyLockWithWhitelist",msg:"Must call `proxy_lock_with_whitelist` to lock via CPI."},{code:6015,name:"RewardsNotReady",msg:"rewards_last_claimed_at > now"},{code:6016,name:"InvalidAdmin",msg:"locker.base != to the admin signer"}],jt={address:"gateVwTnKyFrE8nxUUgfzoZTPKgJQZUbLsEidpG4Dp2"};var Y={version:Nt,name:Ut,instructions:Ft,accounts:zt,events:Qt,errors:Gt,metadata:jt};const Yt="0.1.1",Xt="locked_voter",Zt=[{name:"newLocker",docs:["Creates a new [Locker]."],accounts:[{name:"base",isMut:!1,isSigner:!0,docs:["Base."]},{name:"locker",isMut:!0,isSigner:!1,docs:["[Locker]."],pda:{seeds:[{kind:"const",type:"string",value:"Locker"},{kind:"account",type:"publicKey",path:"base"}]}},{name:"tokenMint",isMut:!1,isSigner:!1,docs:["Mint of the token that can be used to join the [Locker]."]},{name:"governor",isMut:!1,isSigner:!1,docs:["[Governor] associated with the [Locker]."]},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer of the initialization."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"bump",type:"u8"},{name:"params",type:{defined:"LockerParams"}}]},{name:"newEscrow",docs:["Creates a new [Escrow] for an account.","","A Vote Escrow, or [Escrow] for short, is an agreement between an account (known as the `authority`) and the DAO to","lock up tokens for a specific period of time, in exchange for voting rights","linearly proportional to the amount of votes given."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["[Locker]."]},{name:"escrow",isMut:!0,isSigner:!1,docs:["[Escrow]."],pda:{seeds:[{kind:"const",type:"string",value:"Escrow"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"},{kind:"account",type:"publicKey",path:"escrow_owner"}]}},{name:"escrowOwner",isMut:!1,isSigner:!1},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer of the initialization."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"bump",type:"u8"}]},{name:"lock",docs:["Stakes `amount` tokens into the [Escrow].","WARNING: if the program has a whitelist, one should use [crate::locked_voter::lock_with_whitelist] instead.","This version of the instruction is deprecated."],accounts:[{name:"locker",isMut:!0,isSigner:!1,docs:["[Locker]."]},{name:"escrow",isMut:!0,isSigner:!1,docs:["[Escrow]."]},{name:"escrowTokens",isMut:!0,isSigner:!1,docs:["Token account held by the [Escrow]."]},{name:"escrowOwner",isMut:!1,isSigner:!0,docs:["Authority of the [Escrow] and [Self::source_tokens]."]},{name:"sourceTokens",isMut:!0,isSigner:!1,docs:["The source of deposited tokens."]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Token program."]}],args:[{name:"amount",type:"u64"},{name:"duration",type:"i64"}]},{name:"lockWithWhitelistEntry",docs:["Stakes `amount` tokens into the [Escrow], if there is a whitelist.","Stakes `amount` tokens into the [Escrow] via CPI by using the provided [LockerWhitelistEntry]."],accounts:[{name:"lock",accounts:[{name:"locker",isMut:!0,isSigner:!1,docs:["[Locker]."]},{name:"escrow",isMut:!0,isSigner:!1,docs:["[Escrow]."]},{name:"escrowTokens",isMut:!0,isSigner:!1,docs:["Token account held by the [Escrow]."]},{name:"escrowOwner",isMut:!1,isSigner:!0,docs:["Authority of the [Escrow] and [Self::source_tokens]."]},{name:"sourceTokens",isMut:!0,isSigner:!1,docs:["The source of deposited tokens."]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Token program."]}]},{name:"instructionsSysvar",isMut:!1,isSigner:!1},{name:"whitelistEntry",isMut:!1,isSigner:!1}],args:[{name:"amount",type:"u64"},{name:"duration",type:"i64"}]},{name:"exit",docs:["Stakes `amount` tokens into the [Escrow] if there is no whitelist.","Exits the DAO; i.e., withdraws all staked tokens in an [Escrow] if the [Escrow] is unlocked."],accounts:[{name:"locker",isMut:!0,isSigner:!1,docs:["The [Locker] being exited from."]},{name:"escrow",isMut:!0,isSigner:!1,docs:["The [Escrow] that is being closed."]},{name:"escrowOwner",isMut:!1,isSigner:!0,docs:["Authority of the [Escrow]."]},{name:"escrowTokens",isMut:!0,isSigner:!1,docs:["Tokens locked up in the [Escrow]."]},{name:"destinationTokens",isMut:!0,isSigner:!1,docs:["Destination for the tokens to unlock."]},{name:"payer",isMut:!0,isSigner:!0,docs:["The payer to receive the rent refund."]},{name:"tokenProgram",isMut:!1,isSigner:!1,docs:["Token program."]}],args:[]},{name:"activateProposal",docs:["Activates a proposal."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["The [Locker]."]},{name:"governor",isMut:!1,isSigner:!1,docs:["The [Governor]."]},{name:"proposal",isMut:!0,isSigner:!1,docs:["The [Proposal]."]},{name:"escrow",isMut:!1,isSigner:!1,docs:["The user's [Escrow]."]},{name:"escrowOwner",isMut:!1,isSigner:!0,docs:["The [Escrow]'s owner."]},{name:"governProgram",isMut:!1,isSigner:!1,docs:["The [govern] program."]}],args:[]},{name:"castVote",docs:["Casts a vote."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["The [Locker]."]},{name:"escrow",isMut:!1,isSigner:!1,docs:["The [Escrow] that is voting."]},{name:"voteDelegate",isMut:!1,isSigner:!0,docs:["Vote delegate of the [Escrow]."]},{name:"proposal",isMut:!0,isSigner:!1,docs:["The [Proposal] being voted on."]},{name:"vote",isMut:!0,isSigner:!1,docs:["The [Vote]."]},{name:"governor",isMut:!1,isSigner:!1,docs:["The [Governor]."]},{name:"governProgram",isMut:!1,isSigner:!1,docs:["The [govern] program."]}],args:[{name:"side",type:"u8"}]},{name:"setVoteDelegate",docs:["Delegate escrow vote."],accounts:[{name:"escrow",isMut:!0,isSigner:!1,docs:["The [Escrow]."]},{name:"escrowOwner",isMut:!1,isSigner:!0,docs:["The owner of the [Escrow]."]}],args:[{name:"newDelegate",type:"publicKey"}]},{name:"setLockerParams",docs:["Set locker params."],accounts:[{name:"locker",isMut:!0,isSigner:!1,docs:["The [Locker]."]},{name:"governor",isMut:!1,isSigner:!1,docs:["The [Governor]."]},{name:"smartWallet",isMut:!1,isSigner:!0,docs:["The smart wallet on the [Governor]."]}],args:[{name:"params",type:{defined:"LockerParams"}}]},{name:"approveProgramLockPrivilege",docs:["Creates a new [LockerWhitelistEntry] to whitelist program from CPI."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["The [Locker]."]},{name:"whitelistEntry",isMut:!0,isSigner:!1,docs:["[LockerWhitelistEntry]."],pda:{seeds:[{kind:"const",type:"string",value:"LockerWhitelistEntry"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"},{kind:"account",type:"publicKey",path:"executable_id"},{kind:"account",type:"publicKey",path:"whitelisted_owner"}]}},{name:"governor",isMut:!1,isSigner:!1,docs:["Governor for the [Locker]."]},{name:"smartWallet",isMut:!1,isSigner:!0,docs:["Smart wallet on the [Governor]."]},{name:"executableId",isMut:!1,isSigner:!1},{name:"whitelistedOwner",isMut:!1,isSigner:!1},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer of the initialization."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["System program."]}],args:[{name:"bump",type:"u8"}]},{name:"revokeProgramLockPrivilege",docs:["Close a [LockerWhitelistEntry] revoking program's CPI privilege."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["The [Locker]."]},{name:"whitelistEntry",isMut:!0,isSigner:!1,docs:["[LockerWhitelistEntry]."]},{name:"governor",isMut:!1,isSigner:!1,docs:["Governor for the [Locker]."]},{name:"smartWallet",isMut:!1,isSigner:!0,docs:["Smart wallet on the [Governor]."]},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer of the initialization."]}],args:[]}],Jt=[{name:"Locker",docs:["A group of [Escrow]s."],type:{kind:"struct",fields:[{name:"base",docs:["Base account used to generate signer seeds."],type:"publicKey"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"tokenMint",docs:["Mint of the token that must be locked in the [Locker]."],type:"publicKey"},{name:"lockedSupply",docs:["Total number of tokens locked in [Escrow]s."],type:"u64"},{name:"governor",docs:["Governor associated with the [Locker]."],type:"publicKey"},{name:"params",docs:["Mutable parameters of how a [Locker] should behave."],type:{defined:"LockerParams"}}]}},{name:"LockerWhitelistEntry",docs:["An entry in the [Locker]'s whitelist.","","The whitelist controls which programs are allowed to stake tokens into the system."],type:{kind:"struct",fields:[{name:"bump",docs:["Bump seed."],type:"u8"},{name:"locker",docs:["[Locker] this whitelist entry belongs to."],type:"publicKey"},{name:"programId",docs:["Key of the program_id allowed to call the `lock` CPI."],type:"publicKey"},{name:"owner",docs:["The account authorized to be the [Escrow::owner] with this CPI.","If set to [anchor_lang::solana_program::system_program::ID],","all accounts are allowed to be the [Escrow::owner]."],type:"publicKey"}]}},{name:"Escrow",docs:["Locks tokens on behalf of a user."],type:{kind:"struct",fields:[{name:"locker",docs:["The [Locker] that this [Escrow] is part of."],type:"publicKey"},{name:"owner",docs:["The key of the account that is authorized to stake into/withdraw from this [Escrow]."],type:"publicKey"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"tokens",docs:["The token account holding the escrow tokens."],type:"publicKey"},{name:"amount",docs:["Amount of tokens staked."],type:"u64"},{name:"escrowStartedAt",docs:["When the [Escrow::owner] started their escrow."],type:"i64"},{name:"escrowEndsAt",docs:["When the escrow unlocks; i.e. the [Escrow::owner] is scheduled to be allowed to withdraw their tokens."],type:"i64"},{name:"voteDelegate",docs:["Account that is authorized to vote on behalf of this [Escrow].","Defaults to the [Escrow::owner]."],type:"publicKey"}]}}],es=[{name:"LockerParams",docs:["Contains parameters for the [Locker]."],type:{kind:"struct",fields:[{name:"whitelistEnabled",docs:["Whether or not the locking whitelist system is enabled."],type:"bool"},{name:"maxStakeVoteMultiplier",docs:["The weight of a maximum vote lock relative to the total number of tokens locked.","For example, veCRV is 10 because 1 CRV locked for 4 years = 10 veCRV."],type:"u8"},{name:"minStakeDuration",docs:["Minimum staking duration."],type:"u64"},{name:"maxStakeDuration",docs:["Maximum staking duration."],type:"u64"},{name:"proposalActivationMinVotes",docs:["Minimum number of votes required to activate a proposal."],type:"u64"}]}}],ts=[{name:"ApproveLockPrivilegeEvent",fields:[{name:"locker",type:"publicKey",index:!1},{name:"programId",type:"publicKey",index:!1},{name:"owner",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1}]},{name:"ExitEscrowEvent",fields:[{name:"escrowOwner",type:"publicKey",index:!1},{name:"locker",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1},{name:"lockerSupply",type:"u64",index:!1},{name:"releasedAmount",type:"u64",index:!1}]},{name:"LockEvent",fields:[{name:"locker",type:"publicKey",index:!1},{name:"escrowOwner",type:"publicKey",index:!1},{name:"tokenMint",type:"publicKey",index:!1},{name:"amount",type:"u64",index:!1},{name:"lockerSupply",type:"u64",index:!1},{name:"duration",type:"i64",index:!1},{name:"prevEscrowEndsAt",type:"i64",index:!1},{name:"nextEscrowEndsAt",type:"i64",index:!1},{name:"nextEscrowStartedAt",type:"i64",index:!1}]},{name:"NewEscrowEvent",fields:[{name:"escrow",type:"publicKey",index:!1},{name:"escrowOwner",type:"publicKey",index:!1},{name:"locker",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1}]},{name:"NewLockerEvent",fields:[{name:"governor",type:"publicKey",index:!1},{name:"locker",type:"publicKey",index:!1},{name:"tokenMint",type:"publicKey",index:!1},{name:"params",type:{defined:"LockerParams"},index:!1}]},{name:"RevokeLockPrivilegeEvent",fields:[{name:"locker",type:"publicKey",index:!1},{name:"programId",type:"publicKey",index:!1},{name:"timestamp",type:"i64",index:!1}]},{name:"LockerSetParamsEvent",fields:[{name:"locker",type:"publicKey",index:!1},{name:"prevParams",type:{defined:"LockerParams"},index:!1},{name:"params",type:{defined:"LockerParams"},index:!1}]},{name:"SetVoteDelegateEvent",fields:[{name:"escrowOwner",type:"publicKey",index:!1},{name:"oldDelegate",type:"publicKey",index:!1},{name:"newDelegate",type:"publicKey",index:!1}]}],ss=[{code:6e3,name:"ProgramNotWhitelisted",msg:"CPI caller not whitelisted to invoke lock instruction."},{code:6001,name:"LockupDurationTooShort",msg:"Lockup duration must at least be the min stake duration."},{code:6002,name:"LockupDurationTooLong",msg:"Lockup duration must at most be the max stake duration."},{code:6003,name:"RefreshCannotShorten",msg:"A voting escrow refresh cannot shorten the escrow time remaining."},{code:6004,name:"EscrowNotEnded",msg:"Escrow has not ended."},{code:6005,name:"MustProvideWhitelist",msg:"Program whitelist enabled; please provide whitelist entry and instructions sysvar or use the 'lock_with_whitelist' instruction."},{code:6006,name:"EscrowOwnerNotWhitelisted",msg:"CPI caller not whitelisted for escrow owner to invoke lock instruction."},{code:6007,name:"MustCallLockWithWhitelistEntry",msg:"Must call `lock_with_whitelist_entry` to lock via CPI."},{code:6008,name:"MustCallLockPermissionless",msg:"Must call `lock_permissionless` since this DAO does not have a CPI whitelist."}],os={address:"Lock7kBijGCQLEFAmXcengzXKA88iDNQPriQ7TbgeyG"};var we={version:Yt,name:Xt,instructions:Zt,accounts:Jt,types:es,events:ts,errors:ss,metadata:os};const as="0.1.1",is="snapshots",ns=[{name:"createEscrowHistory",docs:["Creates a [EscrowHistory]."],accounts:[{name:"escrow",isMut:!1,isSigner:!1,docs:["The [Escrow]."]},{name:"escrowHistory",isMut:!0,isSigner:!1,docs:["The [EscrowHistory] to be created."],pda:{seeds:[{kind:"const",type:"string",value:"EscrowHistory"},{kind:"account",type:"publicKey",account:"Escrow",path:"escrow"},{kind:"arg",type:"u16",path:"era"}]}},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["[System] program."]}],args:[{name:"era",type:"u16"}]},{name:"createLockerHistory",docs:["Creates a [LockerHistory]."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["The [Locker]."]},{name:"lockerHistory",isMut:!0,isSigner:!1,docs:["The [LockerHistory] to be created."],pda:{seeds:[{kind:"const",type:"string",value:"LockerHistory"},{kind:"account",type:"publicKey",account:"Locker",path:"locker"},{kind:"arg",type:"u16",path:"era"}]}},{name:"payer",isMut:!0,isSigner:!0,docs:["Payer."]},{name:"systemProgram",isMut:!1,isSigner:!1,docs:["[System] program."]}],args:[{name:"era",type:"u16"}]},{name:"sync",docs:["Synchronize an [locked_voter::Escrow] with the [LockerHistory]/[EscrowHistory]."],accounts:[{name:"locker",isMut:!1,isSigner:!1,docs:["The [Locker]."]},{name:"escrow",isMut:!1,isSigner:!1,docs:["The [Escrow]."]},{name:"lockerHistory",isMut:!0,isSigner:!1,docs:["The [LockerHistory] to sync."]},{name:"escrowHistory",isMut:!0,isSigner:!1,docs:["The [EscrowHistory] to sync."]}],args:[]}],rs=[{name:"LockerHistory",docs:["Stores the total number of veTokens in circulation for each period.","","The [LockerHistory] account stores 256 periods, each 3 days each.","For a 5-year [locked_voter::Locker], there will be at least 3 of these accounts existing","at any given time, since the maximum lock period is 5 years."],type:{kind:"struct",fields:[{name:"locker",docs:["The [locked_voter::Locker] being tracked."],type:"publicKey"},{name:"era",docs:["The era. Multiplying this by [ERA_NUM_PERIODS] * [PERIOD_SECONDS];"],type:"u16"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"padding",docs:["Padding for aligning the struct to an 8-byte boundary."],type:{array:["u8",5]}},{name:"veBalances",docs:["The sum of all tracked historical vote escrow balances."],type:{array:["u64",256]}},{name:"veCounts",docs:["Number of voters with non-zero balances at each epoch."],type:{array:["u64",256]}}]}},{name:"EscrowHistory",docs:["Stores the total veToken balance of an [locked_voter::Escrow]","for the given epochs.","","Any time someone refreshes and/or modifies their vote [locked_voter::Escrow], they","should refresh their [EscrowHistory] accounts."],type:{kind:"struct",fields:[{name:"escrow",docs:["The [locked_voter::Escrow] being tracked."],type:"publicKey"},{name:"era",docs:["The era."],type:"u16"},{name:"bump",docs:["Bump seed."],type:"u8"},{name:"padding",docs:["Padding for aligning the struct to an 8-byte boundary."],type:{array:["u8",5]}},{name:"veBalances",docs:["All tracked historical vote escrow balances for this [locked_voter::Escrow]."],type:{array:["u64",256]}}]}}],cs=[{code:6e3,name:"LockerEscrowMismatch",msg:"Locker/escrow mismatch."},{code:6001,name:"EraMismatch",msg:"Era mismatch."},{code:6002,name:"EscrowBalanceDecreased",msg:"Escrow balances cannot decrease."}],ls={address:"snapNQkxsiqDWdbNfz8KVB7e3NPzLwtHHA6WV8kKgUc"};var ge={version:as,name:is,instructions:ns,accounts:rs,errors:cs,metadata:ls};const W=new l("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),de=new l(Y.metadata.address),G=new l(we.metadata.address),j=new l(ge.metadata.address),ds=new l("5WmM9c9WE71y78Ah8Bp8vgyoStscM1ZZyaaFqRf8b2Qa"),us=new l("GW8UH9QYNyFd5zVQJ6srjG6DJSq3WkMdAD123Z7LdzwV"),ms=new l("EAgUhz4LG8fqtrShFo1NDrvEiNPxEi7kHe96D76NzkAj"),hs="processed",ps="confirmed";class ks{owner;payer;wallet;provider;pg_proxy_rewarder;pg_locked_voter;pg_snapshot;locker;whitelistEntry;registeredLocker;proxyEscrow;bump_proxyEscrow;proxy;bump_proxy;escrow;bump_escrow;ata_proxy;ata_proxy_bump;ata_escrow;ata_escrow_bump;init(s,u,i){this.wallet=s,this.owner=u,this.payer=i,this.locker=ds,this.whitelistEntry=us,this.registeredLocker=ms;const r=y().connection;this.provider=new be(r,this.wallet,{preflightCommitment:hs,commitment:ps}),this.pg_proxy_rewarder=new Q(Y,new l(Y.metadata.address),this.provider),this.pg_locked_voter=new Q(we,G,this.provider),this.pg_snapshot=new Q(ge,j,this.provider)}async setAccounts(){[this.proxyEscrow,this.bump_proxyEscrow]=l.findProgramAddressSync([D("ProxyEscrow"),this.owner.toBuffer()],de),[this.proxy,this.bump_proxy]=l.findProgramAddressSync([D("Proxy"),this.proxyEscrow.toBuffer(),this.owner.toBuffer()],de),[this.escrow,this.bump_escrow]=l.findProgramAddressSync([D("Escrow"),this.locker.toBuffer(),this.proxy.toBuffer()],G),[this.ata_proxy,this.ata_proxy_bump]=l.findProgramAddressSync([this.proxy.toBuffer(),L.toBuffer(),f.toBuffer()],W),[this.ata_escrow,this.ata_escrow_bump]=l.findProgramAddressSync([this.escrow.toBuffer(),L.toBuffer(),f.toBuffer()],W)}async buildSync(s){await this.setAccounts();const u=new K;for(const i of ue(s)){const r=(await this.pg_snapshot.account.lockerHistory.all()).find(c=>c.account.era==i).publicKey,[n]=l.findProgramAddressSync([D("EscrowHistory"),this.escrow.toBuffer(),new S(i).toBuffer("le",2)],j);u.add(await this.pg_snapshot.methods.sync().accounts({locker:this.locker,escrow:this.escrow,lockerHistory:r,escrowHistory:n}).instruction())}}async buildCreateAccounts(){await this.setAccounts();const s=new K;return s.add(await this.pg_proxy_rewarder.methods.newProxyEscrow(new S(this.bump_proxyEscrow)).accounts({escrowOwner:this.owner,proxyEscrow:this.proxyEscrow,payer:this.payer,systemProgram:O.programId}).instruction()),s.add(await this.pg_proxy_rewarder.methods.newProxy(new S(this.bump_proxy)).accounts({proxyEscrow:this.proxyEscrow,proxy:this.proxy,tokenMint:f,proxyOwner:this.owner,systemProgram:O.programId}).instruction()),s.add(await this.pg_locked_voter.methods.newEscrow(new S(this.bump_escrow)).accounts({locker:this.locker,escrow:this.escrow,escrowOwner:this.proxy,payer:this.payer,systemProgram:O.programId}).instruction()),s.add(re(this.payer,this.ata_proxy,this.proxy,f)),s.add(re(this.payer,this.ata_escrow,this.escrow,f)),s}async buildCreateLocker(s,u){await this.setAccounts();const i=new K;for(const n of ue(s)){const[c]=l.findProgramAddressSync([D("EscrowHistory"),this.escrow.toBuffer(),new S(n).toBuffer("le",2)],j);i.add(await this.pg_snapshot.methods.createEscrowHistory(n).accounts({escrow:this.escrow,escrowHistory:c,payer:this.payer,systemProgram:O.programId}).instruction())}const[r]=l.findProgramAddressSync([this.owner.toBuffer(),L.toBuffer(),f.toBuffer()],W);return i.add(await this.pg_proxy_rewarder.methods.proxyLock(new S(u),new S(s)).accounts({locker:this.locker,escrow:this.escrow,userTokenAccount:r,proxyTokenAccount:this.ata_proxy,escrowTokenAccount:this.ata_escrow,proxy:this.proxy,payer:this.payer,lockedVoterProgram:G,tokenProgram:L,instructionsSysvar:xe,whitelistEntry:this.whitelistEntry,registeredLocker:this.registeredLocker}).instruction()),i}async buildClaimLocker(){await this.setAccounts();const s=new K,[u]=l.findProgramAddressSync([this.owner.toBuffer(),L.toBuffer(),f.toBuffer()],W);return s.add(await this.pg_proxy_rewarder.methods.claimRewards().accounts({escrow:this.escrow,locker:this.locker,proxy:this.proxy,proxyEscrow:this.proxyEscrow,escrowHistory:void 0,lockerHistory:this.locker,treasuryTokenAccount:void 0,registeredLocker:void 0,treasuryAuthority:void 0,userTokenAccount:u,escrowOwner:this.owner,tokenProgram:L}).instruction()),s}}function ue(d){const u=d/60/60/24/255,i=[];for(let r=0;r<u;r++)i.push(3+r);return i}const A=he("globalLockerPolisStore",{state:()=>({lockerFactory:new ks,multisigPDA:pe("multisigPDA",""),vaultPDA:{}}),getters:{},actions:{async init(){if(ae().value){const[d,s]=U({multisigPda:new l(this.multisigPDA),index:0});this.vaultPDA=d,this.lockerFactory.init(ae().value,v().publicKey.value,v().publicKey.value),await this.lockerFactory.setAccounts()}},async make_createATAs(){const d=await this.lockerFactory.buildCreateAccounts();console.log(d),await me("Create Locker Accounts",d,this.vaultPDA,new l(this.multisigPDA))},async make_createLocker(d,s){const u=await this.lockerFactory.buildCreateLocker(d,s);console.log(u),await me("Create Locker",u,this.vaultPDA,new l(this.multisigPDA))}}});async function me(d,s,u,i){const{sendTransaction:r,publicKey:n}=v();await r(s,y().connection)}const ys=e("div",{class:"text-h1 text-red"},"!Under construction!",-1),ws={class:"row"},gs={class:"col-1"},fs={class:"col"},_s={class:"row q-pr-md items-center"},vs=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Squads Vault Account")],-1),As={class:"col text-right text-subtitle1"},bs={class:"row q-pr-md items-center"},xs=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Polis Escrow Account")],-1),Ss={class:"col text-right text-subtitle1"},Ps={class:"row q-pr-md items-center"},Ts=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Polis Locker Account")],-1),Ls={class:"col text-right text-subtitle1"},Es={class:"row q-pr-md items-center"},Ms=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Polis Proxy Account")],-1),Ds={class:"col text-right text-subtitle1"},$s={class:"row q-pr-md items-center"},Ks=e("div",{class:"col text-right text-subtitle2 text-weight-light"},[e("div",null,"Polis Proxy Escrow Account")],-1),Is={class:"col text-right text-subtitle1"},Cs=e("div",{class:"row items-center q-mx-md"},[e("div",{class:"col"},[e("div",{class:"text-h4"},"Instruction")])],-1),qs={class:"row items-center q-ma-md"},Rs=e("div",{class:"col"},[e("div",{class:"col text-h6"},"1. Initialize"),e("div",{class:"text-subtitle2 text-weight-light"}," Instruction will initialize the ATA token accounts ")],-1),Os={class:"col-4"},Vs={class:"row items-center q-ma-md"},Bs=e("div",{class:"col"},[e("div",{class:"text-h6"},"2. Setup"),e("div",{class:"text-subtitle2 text-weight-light"}," Instruction will create a new locker instance ")],-1),Ws={class:"col-4"},Hs={class:"row items-center q-ma-md"},Ns=e("div",{class:"col"},[e("div",{class:"text-h6"},"Stake Tokens"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will stake additional tokens ")],-1),Us={class:"col-4"},Fs={class:""},zs={class:"row items-center q-ma-md"},Qs=e("div",{class:"col"},[e("div",{class:"col text-h6"},"Harvest"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will claim your rewards ")],-1),Gs={class:"col-4"},js={class:"row items-center q-ma-md"},Ys=e("div",{class:"col"},[e("div",{class:"text-h6"},"Unstake Tokens"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will initiate unstake of all tokens ")],-1),Xs={class:"col-4"},Zs={class:"row items-center q-ma-md"},Js=e("div",{class:"col"},[e("div",{class:"text-h6"},"Cancel Unstake?"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will cancel unstake of all tokens ")],-1),eo={class:"col-4"},to={class:"row items-center q-ma-md"},so=e("div",{class:"col"},[e("div",{class:"text-h6"},"Withdraw Tokens"),e("div",{class:"text-subtitle2 text-weight-light"}," This instruction will withdraw of all tokens after unstake ")],-1),oo={class:"col-4"},ao={class:"row items-center"},io=e("div",{class:"col-1 text-h5"},"Locker Info",-1),no={key:0,class:"col"},ro={class:"col text-right text-subtitle2 text-weight-light"},co={class:"col text-right text-subtitle1"},lo={key:0},uo={key:1},mo={key:0},ho={key:1},po={key:2},ko={key:1,class:"text-subtitle2 text-center"},yo=R({__name:"PolisLockerView",setup(d){new l("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL");const s=I(1),u=I([{label:"1 Day",value:1*24*60*60},{label:"1 Week",value:1*7*24*60*60},{label:"2 Weeks",value:2*7*24*60*60},{label:"1 months",value:1/12*365*24*60*60},{label:"3 months",value:.25*365*24*60*60},{label:"6 months",value:.5*365*24*60*60},{label:"9 months",value:.75*365*24*60*60},{label:"1 years",value:1*365*24*60*60},{label:"2 years",value:2*365*24*60*60},{label:"3 years",value:3*365*24*60*60},{label:"4 years",value:4*365*24*60*60},{label:"5 years",value:5*365*24*60*60}]),i=I(u.value[0]);return Z(async()=>{v().publicKey.value&&await A().init()}),ke(()=>v().publicKey.value,async()=>{await A().init()}),(r,n)=>(m(),p(N,null,[ys,o(F,{flat:""},{default:k(()=>[o(_,null,{default:k(()=>{var c,T,ee,te;return[e("div",ws,[e("div",gs,[o(ye,{src:"/currencies/POLIS.webp"})]),o(P,{class:"q-mx-sm",vertical:""}),e("div",fs,[e("div",_s,[vs,e("div",As,[e("div",null,h(a(A)().vaultPDA),1)])]),e("div",bs,[xs,e("div",Ss,[e("div",null,h((c=a(A)().lockerFactory)==null?void 0:c.escrow),1)])]),e("div",Ps,[Ts,e("div",Ls,[e("div",null,h((T=a(A)().lockerFactory)==null?void 0:T.locker),1)])]),e("div",Es,[Ms,e("div",Ds,[e("div",null,h((ee=a(A)().lockerFactory)==null?void 0:ee.proxy),1)])]),e("div",$s,[Ks,e("div",Is,[e("div",null,h((te=a(A)().lockerFactory)==null?void 0:te.proxyEscrow),1)])])])])]}),_:1}),o(_,null,{default:k(()=>[Cs,o(P,{class:"q-my-sm"}),e("div",qs,[Rs,e("div",Os,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:n[0]||(n[0]=c=>a(A)().make_createATAs())})])]),e("div",Vs,[Bs,e("div",Ws,[o($e,{filled:"",modelValue:i.value,"onUpdate:modelValue":n[1]||(n[1]=c=>i.value=c),options:u.value,label:"Standard"},null,8,["modelValue","options"]),o(q,{dense:"",square:"",class:"col",standout:"",type:"number",modelValue:s.value,"onUpdate:modelValue":n[2]||(n[2]=c=>s.value=c),label:"Amount to stake"},null,8,["modelValue"]),o(w,{class:"full-width",square:"",label:"Sign",color:"primary",onClick:n[3]||(n[3]=c=>{var T;return a(A)().make_createLocker(((T=i.value)==null?void 0:T.value)??0,s.value*Math.pow(10,8))})})])]),e("div",Hs,[Ns,e("div",Us,[e("div",Fs,[o(q,{dense:"",square:"",class:"col",standout:"",type:"number",modelValue:s.value,"onUpdate:modelValue":n[4]||(n[4]=c=>s.value=c),label:"Amount to stake"},null,8,["modelValue"]),o(w,{class:"full-width",square:"",label:"Sign",color:"primary",onClick:n[5]||(n[5]=c=>a(t)().build_StakeTokens(s.value))})])])]),e("div",zs,[Qs,e("div",Gs,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:n[6]||(n[6]=c=>a(t)().build_harvestRewards())})])]),e("div",js,[Ys,e("div",Xs,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:n[7]||(n[7]=c=>a(t)().build_unstakeTokens())})])]),e("div",Zs,[Js,e("div",eo,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:n[8]||(n[8]=c=>a(t)().build_cancelUnstake())})])]),e("div",to,[so,e("div",oo,[o(w,{class:"full-width",label:"Sign",color:"primary",onClick:n[9]||(n[9]=c=>a(t)().build_withdrawTokens())})])])]),_:1}),o(_,null,{default:k(()=>[o(P,{class:"q-my-sm"}),e("div",ao,[io,o(P,{class:"q-mx-sm",vertical:""}),a(t)().stakingAccountAtlasInfo?(m(),p("div",no,[(m(!0),p(N,null,X(Object.keys(a(t)().stakingAccountAtlasInfo),(c,T)=>(m(),p("div",{class:"row q-pr-md items-center",key:T},[e("div",ro,[e("div",null,h(c),1)]),e("div",co,[["totalStake","activeStake","paidRewards","pendingRewards"].includes(c)?(m(),p("div",lo,h(parseInt(a(t)().stakingAccountAtlasInfo[c])*Math.pow(10,-a(J))),1)):["stakedAtTs","lastPendingRewardCalcTs","lastHarvestTs","unstakedTs"].includes(c)?(m(),p("div",uo,[parseInt(a(t)().stakingAccountAtlasInfo[c])==0?(m(),p("div",mo," - ")):(m(),p("div",ho,h(new Date(parseInt(a(t)().stakingAccountAtlasInfo[c])*1e3).toLocaleString()),1))])):(m(),p("div",po,h(a(t)().stakingAccountAtlasInfo[c]),1))])]))),128))])):(m(),p("div",ko,"No Locker found!"))])]),_:1})]),_:1})],64))}}),wo={class:"row"},go=e("div",{class:"col-3"},"Wallet",-1),fo={class:"col"},_o={class:"row q-gutter-x-xs no-wrap justify-end"},vo=e("div",null,"Atlas",-1),Ao={class:"col"},bo={class:"row q-gutter-x-xs no-wrap justify-end"},xo=e("div",null,"Polis",-1),So={class:"row"},Po=e("div",{class:"col-3"},"Squads",-1),To={class:"col"},Lo={class:"row q-gutter-x-xs no-wrap justify-end"},Eo=e("div",null,"Atlas",-1),Mo={class:"col"},Do={class:"row q-gutter-x-xs no-wrap justify-end"},$o=e("div",null,"Polis",-1),Ko={class:"row"},Io=e("div",{class:"col-3"},"Locker",-1),Co={class:"col"},qo={class:"row q-gutter-x-xs no-wrap justify-end"},Ro=e("div",null,"Atlas",-1),Oo={class:"col"},Vo={class:"row q-gutter-x-xs no-wrap justify-end"},Bo=e("div",null,"Polis",-1),Wo=R({__name:"TokenLockerBalances",setup(d){return Z(async()=>{v().publicKey.value&&await t().setAccounts()}),ke(()=>v().publicKey.value,async()=>{await t().setAccounts()}),(s,u)=>(m(),b(F,{class:""},{default:k(()=>[o(_,null,{default:k(()=>[e("div",wo,[go,e("div",fo,[e("div",_o,[e("div",null,h(a(t)().atlas_balance_wallet),1),vo])]),e("div",Ao,[e("div",bo,[e("div",null,h(a(t)().polis_balance_wallet),1),xo])])]),e("div",So,[Po,e("div",To,[e("div",Lo,[e("div",null,h(a(t)().atlas_balance_squads),1),Eo])]),e("div",Mo,[e("div",Do,[e("div",null,h(a(t)().polis_balance_squads),1),$o])])]),e("div",Ko,[Io,e("div",Co,[e("div",qo,[e("div",null,h(a(t)().atlas_balance_locker),1),Ro])]),e("div",Oo,[e("div",Vo,[e("div",null,h(a(t)().polis_balance_locker),1),Bo])])])]),_:1})]),_:1}))}}),Ho={key:0,class:"col absolute-center"},No={key:1},Uo=e("div",{class:"col"},null,-1),ka=R({__name:"StarAtlasLocker",setup(d){const s=I("setup");return(u,i)=>(m(),b(_e,{class:"bg-black"},{default:k(()=>{var r,n;return[(n=(r=a(v)().publicKey)==null?void 0:r.value)!=null&&n.toString()?(m(),p("div",No,[o(fe,{modelValue:s.value,"onUpdate:modelValue":i[0]||(i[0]=c=>s.value=c),align:"left",class:""},{default:k(()=>[o(z,{name:"setup",label:"Setup"}),o(z,{name:"atlas",label:"Atlas"}),o(z,{name:"polis",label:"Polis"}),Uo,o(Wo,{class:"q-pr-md col"})]),_:1},8,["modelValue"]),s.value=="setup"?(m(),b(Ze,{key:0})):H("",!0),s.value=="atlas"?(m(),b(Ht,{key:1})):H("",!0),s.value=="polis"?(m(),b(yo,{key:2})):H("",!0)])):(m(),p("div",Ho,[o(a(Se),{dark:""})]))]}),_:1}))}});export{ka as default};
