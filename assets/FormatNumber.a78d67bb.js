import{cY as k,cZ as b,c_ as w,c$ as T,d0 as y,cV as d,cU as B,cj as r,cp as i,d1 as M,P as h,cP as P,au as _,ah as v,b1 as S,ak as x}from"./index.e50ad1c3.js";function $({multisigPda:n,transactionIndex:s,creator:e,rentPayer:a,vaultIndex:t,ephemeralSigners:o,transactionMessage:c,addressLookupTableAccounts:l,memo:u,programId:g=y}){const[m]=k({multisigPda:n,index:t,programId:g}),[p]=b({multisigPda:n,index:s,programId:g}),f=w({message:c,addressLookupTableAccounts:l,vaultPda:m});return T({multisig:n,transaction:p,creator:e,rentPayer:a??e},{args:{vaultIndex:t,ephemeralSigners:o,transactionMessage:f,memo:u??null}},g)}const C=async(n,s="Unlabeled transaction")=>{const{sendTransaction:e}=d(),a=B.create({group:!1,timeout:0,spinner:!0,message:s,position:"bottom-right"});try{a({caption:"Waiting for user to sign..."});let t="";if(!r().useSquads)t=await e(n,i().connection);else{console.log(n.instructions);const c=await i().connection.getLatestBlockhash(),l=new M({payerKey:new h(r().vaultPDA),recentBlockhash:c.blockhash,instructions:n.instructions});await r().loadMultisigInfo();const u=$({multisigPda:new h(r().multisigPDA),transactionIndex:r().getNewTransactionIndex,creator:d().publicKey.value,vaultIndex:0,ephemeralSigners:0,transactionMessage:l,memo:s});t=await e(new P().add(u),i().connection)}a({color:"green-5",message:"[1/2] Waiting for confirmation...",caption:`${t}`});const o=await i().connection.getLatestBlockhash();return await i().connection.confirmTransaction({blockhash:o.blockhash,lastValidBlockHeight:o.lastValidBlockHeight,signature:t},"confirmed"),a({color:"green-8",message:"[2/2]  Waiting for finalization...",caption:`${t}`}),await i().connection.confirmTransaction({blockhash:o.blockhash,lastValidBlockHeight:o.lastValidBlockHeight,signature:t},"finalized"),a({color:"positive",timeout:5e3,icon:"done",spinner:!1,message:"Finalized",caption:`${t}`}),0}catch(t){a({progress:!0,spinner:!1,icon:"error",color:"negative",timeout:5e3,caption:`Error handling transaction: ${t.toString()}`})}};function H(n,s=2,e=3){n||(n=0);const a=n.toFixed(s).split(".");return a[0]=a[0].padStart(e,"0"),a.join(".")}const V=["innerHTML"],L=_({__name:"FormatNumber",props:["number","decimals","padStart"],setup(n){const s=n,e=v(()=>{const a=/^(0+)(.+)/,t=H(s.number,s.decimals,s.padStart).match(a);if(t){const o=t[1],c=t[2];return`
          <div class="row" >
          <span class="text-weight-thin">${o}</span>
          <span class="text-weight-bold">${c}</span>
          </div>
        `}return`<span class="rest">${s.number}</span>`});return(a,t)=>(S(),x("div",{innerHTML:e.value},null,8,V))}});export{L as _,C as h};
