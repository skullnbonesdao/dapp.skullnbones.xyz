import{cV as r,cU as d,cj as n,co as a,cW as p,P as l,cQ as m}from"./index.840bf7b6.js";import{v as f}from"./token.726ae62b.js";const T=async(e,s="Unlabeled transaction")=>{const{sendTransaction:i}=r(),o=d.create({group:!1,timeout:0,spinner:!0,message:s,caption:"...",position:"bottom-right"});try{o({caption:"Waiting for user to sign..."});let t="";if(!n().useSquads)t=await i(e,a().connection);else{console.log(e.instructions);const u=await a().connection.getRecentBlockhash(),g=new p({payerKey:new l(n().vaultPDA),recentBlockhash:u.blockhash,instructions:e.instructions});await n().loadMultisigInfo();const h=f({multisigPda:new l(n().multisigPDA),transactionIndex:n().getNewTransactionIndex,creator:r().publicKey.value,vaultIndex:0,ephemeralSigners:0,transactionMessage:g,memo:s});t=await i(new m().add(h),a().connection)}o({caption:`Waiting for confirmation: ${t}`});const c=await a().connection.getLatestBlockhash();return await a().connection.confirmTransaction({blockhash:c.blockhash,lastValidBlockHeight:c.lastValidBlockHeight,signature:t}),o({color:"positive",timeout:5e3,icon:"done",spinner:!1,caption:`Confirmed: ${t}`}),0}catch(t){o({progress:!0,spinner:!1,icon:"error",color:"negative",timeout:5e3,caption:`Error handling transaction: ${t.toString()}`})}};export{T as h};
